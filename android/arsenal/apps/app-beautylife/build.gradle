group = 'org.smartrobot'
version = getEnvValue("versionName", "1.0.0")
def apVersion = getEnvValue("apVersion", "")

apply plugin: 'com.android.application'
apply plugin: 'com.taobao.atlas'
//apply plugin: 'walle'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

apply plugin: 'bugly'
bugly {
    appId = '3364cda7a3'
    appKey = '3d2fea0f-134d-4083-8725-045e2367743d'
}

//noinspection GroovyMissingReturnStatement
android {
    compileSdkVersion = rootProject.ext.compileSdkVersion
    buildToolsVersion = rootProject.ext.buildToolsVersion
    defaultConfig {
        applicationId "com.multiapk"
        minSdkVersion 18
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName version
        vectorDrawables.useSupportLibrary = true //Gradle Plugin 2.0以上,AppCompat23.2以上,Android 5.0之前使用Vector
    }
}

atlas {
    atlasEnabled true

    tBuildConfig {
        autoPackageId true
        //preProcessManifest true
        autoStartBundles = ['business.smartrobot'] //自启动bundle配置
        outOfApkBundles = ['module-mobile']
        preLaunch = 'com.multiapk.BeautyPreLaunch'
        classInject false
    }

    manifestOptions {
        addAtlasProxyComponents true
    }

    patchConfigs {
        debug {
            createTPatch true
        }
    }


    buildTypes {
        debug {
            if (apVersion) {
                baseApDependency "org.smartrobot:base-app-beautylife:${apVersion}@ap"
                patchConfig patchConfigs.debug
            }
        }
    }
}


/*walle {
    // 指定渠道包的输出路径
    apkOutputFolder = new File("${buildDir}/outputs/channels");
    // 定制渠道包的APK的文件名称
    apkFileNameFormat = '${appName}-${channel}-${buildType}-v${versionName}-${versionCode}-${buildTime}.apk';
    // 渠道配置文件
    channelFile = new File("${projectDir}/channels.txt")
}*/

tasks.whenTaskAdded { task ->
    if (task.name.contains("DebugAndroidTest")) {
        task.setEnabled(false);
    }
    if (task.name.contains("assemble")) {
        def files = null;
        def file = new File(task.project.getBuildDir(), "outputs");
        if (file.exists() && new File(file, "tpatch-debug").exists()) {
            files = new File(file, "tpatch-debug").listFiles();
        }
        if (files != null) {
            for (File file1 : files) {
                if (file1.getName().endsWith(".json") || file1.getName().endsWith(".tpatch")) {

                    if (!new File(task.project.getRootDir(), "hisTpatch").exists()) {
                        new File(task.project.getRootDir(), "hisTpatch").mkdirs();
                    }
                    org.apache.commons.io.FileUtils.copyFileToDirectory(file1, new File(task.project.getRootDir(), "hisTpatch"));
                }
            }
        }
    }
}

dependencies {
    compile fileTree(dir: "libs", include: ["*.jar"])
    compile project(':library-base')

    bundleCompile project(':library-business')
    bundleCompile project(":module-computer")
    bundleCompile project(":module-mobile")
    //bundleCompile project(":module-mobile-android")
    //bundleCompile project(":module-mobile-ios")
    bundleCompile project(":module-order")

    // LeakCanary
    debugCompile "com.squareup.leakcanary:leakcanary-android:$rootProject.ext.leakcanaryVersion"
    releaseCompile "com.squareup.leakcanary:leakcanary-android-no-op:$rootProject.ext.leakcanaryVersion"
    testCompile "com.squareup.leakcanary:leakcanary-android-no-op:$rootProject.ext.leakcanaryVersion"
}


apply plugin: 'maven'
apply plugin: 'maven-publish'

publishing {
    repositories {
        mavenLocal()
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            artifact "${project.buildDir}/outputs/apk/${project.name}-debug.ap"
            artifactId "base-app-beautylife"
        }
    }
}

static String getEnvValue(key, defValue) {
    def val = System.getProperty(key)
    if (null != val)
        return val
    val = System.getenv(key)
    if (null != val)
        return val
    return defValue
}