group = 'org.smartrobot'
version = getEnvValue("versionName", "1.0.0");
def apVersion = getEnvValue("apVersion", "");

static String getEnvValue(key, defValue) {
    def val = System.getProperty(key);
    if (null != val) {
        return val;
    }
    val = System.getenv(key);
    if (null != val) {
        return val;
    }
    return defValue;
}


apply plugin: 'com.android.application'
apply plugin: 'com.taobao.atlas'
apply plugin: 'walle'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

//noinspection GroovyMissingReturnStatement
android {

    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion = rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "com.multiapk"
        minSdkVersion 18
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 12
        versionName "12"

        //Gradle Plugin 2.0以上,AppCompat23.2以上,Android 5.0之前使用Vector
        vectorDrawables.useSupportLibrary = true

        /*ndk {
            //abiFilters 'x86', 'x86_64', 'arm64-v8a', 'armeabi-v7a', 'armeabi'
            abiFilters 'x86', 'x86_64', 'arm64-v8a', 'armeabi-v7a'
        }

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        jackOptions {
            enabled false
        }*/
    }

     /*signingConfigs {
         debug {
             storeFile file("debug.keystore")
             storePassword "android"
             keyAlias "androiddebugkey"
             keyPassword "android"
             v2SigningEnabled true
         }

         release {
             storeFile file("debug.keystore")
             storePassword "android"
             keyAlias "androiddebugkey"
             keyPassword "android"
             v2SigningEnabled true
         }
     }

    buildTypes {

        debug {
            *//*if (apVersion) {
                baseApDependency "com.taobao.android.atlasdemo:AP-debug:${apVersion}@ap"
                patchConfig patchConfigs.debug
            }*//*

            debuggable true
            jniDebuggable true
            buildConfigField "boolean", "LOG_DEBUG", "true"
            versionNameSuffix ""
            // Minifying the variant used for tests is not supported when using Jack.
            minifyEnabled false
            zipAlignEnabled false
            shrinkResources false
            signingConfig signingConfigs.debug

//            proguardFiles "${rootDir}/gradle/multiapk/global_proguard.pro", "proguard-rules.pro"
//            testProguardFiles "${rootDir}/gradle/multiapk/global_proguard.pro", "proguardTest-rules.pro"

            *//*ndk {
                abiFilters "x86","armeabi"
            }*//*
        }
        release {
            debuggable true
            jniDebuggable true
            versionNameSuffix ""
            minifyEnabled false
            zipAlignEnabled false
            shrinkResources false
            signingConfig signingConfigs.release

//            proguardFiles "${rootDir}/gradle/multiapk/global_proguard.pro", "proguard-rules.pro"
//            testProguardFiles "${rootDir}/gradle/multiapk/global_proguard.pro", "proguardTest-rules.pro"
        }
    }

    testOptions {
        unitTests.returnDefaultValues = false
        resultsDir = "${buildDir}/test-reports"

        // Always show the result of every unit test, even if it passes.
        unitTests.all {
            testLogging {
                events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    packagingOptions {
        exclude 'META-INF/MANIFEST.MF'
        exclude 'META-INF/NOTICE.TXT'
        exclude 'META-INF/LICENSE.TXT'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/rxjava.properties'
    }

    dexOptions {
        javaMaxHeapSize "4g"
        preDexLibraries = false
    }

    lintOptions {
        textReport true
        textOutput 'stdout'
        fatal 'UnusedResources'
        warning 'ResourceType'
    }
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
        lintConfig file("$rootDir/lint.xml")
        showAll true
        absolutePaths true
        textReport true
        textOutput file("$buildDir/outputs/lint/${project.name}_lint-report.txt")
        xmlReport true
        xmlOutput file("$buildDir/outputs/lint/${project.name}_lint-report.xml")
        htmlReport true
        htmlOutput file("$buildDir/outputs/lint/${project.name}_lint-report.html")
    }

    configurations.all {
        resolutionStrategy {
            force "com.google.code.findbugs:jsr305:1.3.9"
        }
    }*/

    // If you need to add more flavors, consider using flavor dimensions.
    /*productFlavors {
        mock {
            applicationIdSuffix = ".mock"
        }
    }

    // Remove mockRelease as it's not needed.
    variantFilter { variant ->
        if (variant.buildType.name == 'release' && variant.getFlavors().get(0).name == 'mock') {
            variant.setIgnore(true)
        }
    }

    productFlavors.all { flavor ->
        flavor.manifestPlaceholders = [
                debugModel: true,
        ]
    }

    applicationVariants.all { variant ->
        String flavorName = variant.productFlavors[0].name
        String buildType = variant.buildType.name

        variant.outputs.each { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                def fileName = "${project.name}-${buildType}.apk"
                output.outputFile = new File(outputFile.parent, fileName)
            }
        }
    }*/
}

atlas {

    atlasEnabled true

    tBuildConfig {
        autoPackageId true
        preProcessManifest true
        //autoStartBundles = ['com.multiapk.modules.computer','business.smartrobot','com.multiapk.modules.order'] //自启动bundle配置
        outOfApkBundles = ['module-mobile']
        preLaunch = 'com.multiapk.BeautyPreLaunch'
        classInject false
    }

    manifestOptions {
        addAtlasProxyComponents true
    }

    patchConfigs {
        debug {
            createTPatch true
        }
    }
}


walle {
    // 指定渠道包的输出路径
    apkOutputFolder = new File("${buildDir}/outputs/channels");
    // 定制渠道包的APK的文件名称
    apkFileNameFormat = '${appName}-${channel}-${buildType}-v${versionName}-${versionCode}-${buildTime}.apk';
    // 渠道配置文件
    channelFile = new File("${projectDir}/channels.txt")
}

tasks.whenTaskAdded { task ->
    if (task.name.contains("DebugAndroidTest")) {
        task.setEnabled(false);
    }
    if (task.name.contains("assemble")) {
        def files = null;
        def file = new File(task.project.getBuildDir(), "outputs");
        if (file.exists() && new File(file, "tpatch-debug").exists()) {
            files = new File(file, "tpatch-debug").listFiles();
        }
        if (files != null) {
            for (File file1 : files) {
                if (file1.getName().endsWith(".json") || file1.getName().endsWith(".tpatch")) {

                    if (!new File(task.project.getRootDir(), "hisTpatch").exists()) {
                        new File(task.project.getRootDir(), "hisTpatch").mkdirs();
                    }
                    org.apache.commons.io.FileUtils.copyFileToDirectory(file1, new File(task.project.getRootDir(), "hisTpatch"));
                }
            }
        }
    }
}

dependencies {
    compile fileTree(dir: "libs", include: ["*.jar"])
    compile project(':library-base')
    bundleCompile project(':library-business')

    // compile time start ----------------------------------------------------------------------
    // https://bitbucket.org/hvisser/android-apt/wiki/Migration
    //annotationProcessor 'org.androidannotations:androidannotations:4.1.0'
    //annotationProcessor 'com.google.auto.value:auto-value:1.4.1'
    //provided "com.google.auto.value:auto-value:1.4.1"
    // compile time end   ----------------------------------------------------------------------
    
    bundleCompile project(":module-computer")
    bundleCompile project(":module-mobile")
//    bundleCompile project(":module-mobile-android")
//    bundleCompile project(":module-mobile-ios")
    bundleCompile project(":module-order")

    // Dependencies for local unit tests
    testCompile "junit:junit:$rootProject.ext.junitVersion"
    testCompile "org.mockito:mockito-all:$rootProject.ext.mockitoVersion"
    testCompile "org.hamcrest:hamcrest-all:$rootProject.ext.hamcrestVersion"

    // Android Testing Support Library's runner and rules
    androidTestCompile "com.android.support.test:runner:$rootProject.ext.runnerVersion"
    androidTestCompile "com.android.support.test:rules:$rootProject.ext.rulesVersion"

    // Dependencies for Android unit tests
    androidTestCompile "junit:junit:$rootProject.ext.junitVersion"
    androidTestCompile "org.mockito:mockito-core:$rootProject.ext.mockitoVersion"
    androidTestCompile "com.google.dexmaker:dexmaker:$rootProject.ext.dexmakerVersion"
    androidTestCompile "com.google.dexmaker:dexmaker-mockito:$rootProject.ext.dexmakerVersion"

    // Set this dependency to build and run UI Automator tests
    androidTestCompile 'com.android.support.test.uiautomator:uiautomator-v18:2.1.2'

    // Espresso UI Testing
    androidTestCompile "com.android.support.test.espresso:espresso-core:$rootProject.ext.espressoVersion"
    androidTestCompile "com.android.support.test.espresso:espresso-contrib:$rootProject.ext.espressoVersion"
    androidTestCompile "com.android.support.test.espresso:espresso-intents:$rootProject.ext.espressoVersion"
    androidTestCompile "com.android.support.test.espresso:espresso-idling-resource:$rootProject.ext.espressoVersion"
    /*androidTestCompile("com.android.support.test.espresso:espresso-core:$rootProject.ext.espressoVersion", {
        exclude group: "com.google.code.findbugs"
        exclude group: "com.android.support", module: "support-annotations"
    })*/

    // Resolve conflicts between main and test APK:
    androidTestCompile "com.android.support:support-annotations:$rootProject.ext.supportLibraryVersion"
    androidTestCompile "com.android.support:support-v4:$rootProject.ext.supportLibraryVersion"
    androidTestCompile "com.android.support:appcompat-v7:$rootProject.ext.supportLibraryVersion"
    androidTestCompile "com.android.support:design:$rootProject.ext.supportLibraryVersion"
    androidTestCompile "com.android.support:cardview-v7:$rootProject.ext.supportLibraryVersion"
    androidTestCompile "com.android.support:recyclerview-v7:$rootProject.ext.supportLibraryVersion"
    androidTestCompile "com.android.support:animated-vector-drawable:$rootProject.ext.supportLibraryVersion"
    //androidTestCompile "com.android.support:leanback-v17:$rootProject.ext.supportLibraryVersion"

    // LeakCanary
    debugCompile "com.squareup.leakcanary:leakcanary-android:$rootProject.ext.leakcanaryVersion"
    releaseCompile "com.squareup.leakcanary:leakcanary-android-no-op:$rootProject.ext.leakcanaryVersion"
    testCompile "com.squareup.leakcanary:leakcanary-android-no-op:$rootProject.ext.leakcanaryVersion"
}


apply plugin: 'maven'
apply plugin: 'maven-publish'


publishing {
    repositories {
        mavenLocal()
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            artifact "${project.buildDir}/outputs/apk/${project.name}-debug.ap"
            artifactId "AP-debug"
        }
    }
}