apply plugin: "com.android.application"
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: "com.mlibrary.multiapk.application"
apply plugin: 'com.antfortune.freeline'
apply plugin: 'walle'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

multiApkApplication {
    solidMode = rootProject.ext.solidMode
    buildToolsVersion = rootProject.ext.buildToolsVersion
    supportLibraryVersion = rootProject.ext.supportLibraryVersion
    packageName = "com.multiapk"
    moduleConfigFilePath = "$rootDir/gradle/multiapk/apk_module_config.xml"
    keystore = "$projectDir/debug.keystore"
    keyAlias = "androiddebugkey"
    keyPassword = "android"
    storePassword = "android"
    javaCompileVersion = "1.7"
//    aaptMacPath="/Volumes/android/android_source/WORKING_DIRECTORY/out/host/darwin-x86/bin/aapt"
//    aaptMacPath = "/Volumes/android/android_source/WORKING_DIRECTORY/out/target/product/generic/system/bin/aapt"
//    aaptMacPath="/Users/krmao/Desktop/aapt"
    targetSdkVersion = rootProject.ext.targetSdkVersion
}

freeline {
    hack true
    productFlavor 'ctrip'
}

walle {
    // 指定渠道包的输出路径
    apkOutputFolder = new File("${buildDir}/outputs/channels");
    // 定制渠道包的APK的文件名称
    apkFileNameFormat = '${appName}-${channel}-${buildType}-v${versionName}-${versionCode}-${buildTime}.apk';
    // 渠道配置文件
    channelFile = new File("${projectDir}/channels.txt")
}

//noinspection GroovyMissingReturnStatement
android {

    /*greendao {
        schemaVersion 1
        targetGenDir "src/main/java"
    }*/

    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion = rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "com.multiapk"
        minSdkVersion 18
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 12
        versionName "12"

        multiDexEnabled !solidMode
        vectorDrawables.useSupportLibrary = true

        ndk {
            //abiFilters 'x86', 'x86_64', 'arm64-v8a', 'armeabi-v7a', 'armeabi'
            abiFilters 'x86', 'x86_64', 'arm64-v8a', 'armeabi-v7a'
        }

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        jackOptions {
            enabled false
        }
    }

    /**
     * 根据不同平台打出不同的App，由此来缩减包体积
     * https://developer.android.com/studio/build/configure-apk-splits.html
     *
     * armeabiv-v7a: 第7代及以上的 ARM 处理器。2011年15月以后的生产的大部分Android设备都使用它。
     * arm64-v8a: 第8代、64位ARM处理器，很少设备，三星 Galaxy S6是其中之一。
     * armeabi: 第5代、第6代的ARM处理器，早期的手机用的比较多。
     * x86: 平板、模拟器用得比较多。
     * x86_64: 64位的平板。
     *
     * 如果应用不支持 Android 2.3 (Gingerbread)，可以不需要 armeabi 类的ABI.
     **/
    /*splits {
        abi {
            enable true
            reset()
            include 'x86', 'x86_64', 'arm64-v8a', 'armeabi-v7a', 'armeabi'
            universalApk false
        }
    }*/

    /*dataBinding { enabled = false }*/

    signingConfigs {
        debug {
            storeFile file("debug.keystore")
            storePassword multiApkApplication.storePassword
            keyAlias multiApkApplication.keyAlias
            keyPassword multiApkApplication.keyPassword
            v2SigningEnabled true
        }

        release {
            storeFile file("debug.keystore")
            storePassword multiApkApplication.storePassword
            keyAlias multiApkApplication.keyAlias
            keyPassword multiApkApplication.keyPassword
            v2SigningEnabled true
        }
    }

    buildTypes {
        debug {
            debuggable true
            jniDebuggable true
            buildConfigField "boolean", "LOG_DEBUG", "true"
            versionNameSuffix ""
            // Minifying the variant used for tests is not supported when using Jack.
            minifyEnabled false
            zipAlignEnabled false
            shrinkResources false
            signingConfig signingConfigs.debug

            proguardFiles "${rootDir}/gradle/multiapk/global_proguard.pro", "proguard-rules.pro"
            testProguardFiles "${rootDir}/gradle/multiapk/global_proguard.pro", "proguardTest-rules.pro"
        }
        release {
            debuggable false
            jniDebuggable false
            versionNameSuffix ""
            minifyEnabled true
            zipAlignEnabled true
            shrinkResources true
            signingConfig signingConfigs.release

            proguardFiles "${rootDir}/gradle/multiapk/global_proguard.pro", "proguard-rules.pro"
            testProguardFiles "${rootDir}/gradle/multiapk/global_proguard.pro", "proguardTest-rules.pro"
        }
    }

    testOptions {
        unitTests.returnDefaultValues = false
        resultsDir = "${buildDir}/test-reports"

        // Always show the result of every unit test, even if it passes.
        unitTests.all {
            testLogging {
                events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    packagingOptions {
        exclude 'META-INF/MANIFEST.MF'
        exclude 'META-INF/NOTICE.TXT'
        exclude 'META-INF/LICENSE.TXT'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/rxjava.properties'
    }

    dexOptions {
        javaMaxHeapSize "4g"
        preDexLibraries = false
    }

    lintOptions {
        textReport true
        textOutput 'stdout'
        fatal 'UnusedResources'
        warning 'ResourceType' //TODO remove eventually with ButterKnife 8.0 release
    }
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
        lintConfig file("$rootDir/lint.xml")
        showAll true
        absolutePaths true
        textReport true
        textOutput file("$buildDir/outputs/lint/${project.name}_lint-report.txt")
        xmlReport true
        xmlOutput file("$buildDir/outputs/lint/${project.name}_lint-report.xml")
        htmlReport true
        htmlOutput file("$buildDir/outputs/lint/${project.name}_lint-report.html")
    }

    configurations.all {
        resolutionStrategy {
            force "com.google.code.findbugs:jsr305:1.3.9"
        }
    }

    // If you need to add more flavors, consider using flavor dimensions.
    productFlavors {
        mock {
            applicationIdSuffix = ".mock"
        }
        prod {

        }
    }

    // Remove mockRelease as it's not needed.
    variantFilter { variant ->
        if (variant.buildType.name == 'release' && variant.getFlavors().get(0).name == 'mock') {
            variant.setIgnore(true);
        }
    }

    productFlavors.all { flavor ->
        flavor.manifestPlaceholders = [solidMode: solidMode,]
    }

    applicationVariants.all { variant ->
        String flavorName = variant.productFlavors[0].name
        String buildType = variant.buildType.name

        variant.outputs.each { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                //def fileName = "${outputFile.name}_${flavorName}_${buildType}.apk"
                def fileName = "${project.name}-release.apk"
                output.outputFile = new File(outputFile.parent, fileName)
            }
        }
    }
}

dependencies {
    compile fileTree(dir: "libs", include: ["*.jar"])
    compile project(":app:libraries:library-common")

    // compile time start ----------------------------------------------------------------------
    // https://bitbucket.org/hvisser/android-apt/wiki/Migration
    annotationProcessor 'org.androidannotations:androidannotations:4.1.0'
    annotationProcessor 'com.google.auto.value:auto-value:1.4.1'
    provided "com.google.auto.value:auto-value:1.4.1"
    // compile time end   ----------------------------------------------------------------------


    if (!solidMode) {//普通模式才需要依赖。solid模式编译时不依赖子bu。
        compile project(":app:modules:computer")
        compile project(":app:modules:mobile")
        compile project(":app:modules:mobile.android")
        compile project(":app:modules:mobile.ios")

        // Dependencies for local unit tests
        testCompile "junit:junit:$rootProject.ext.junitVersion"
        testCompile "org.mockito:mockito-all:$rootProject.ext.mockitoVersion"
        testCompile "org.hamcrest:hamcrest-all:$rootProject.ext.hamcrestVersion"

        // Android Testing Support Library's runner and rules
        androidTestCompile "com.android.support.test:runner:$rootProject.ext.runnerVersion"
        androidTestCompile "com.android.support.test:rules:$rootProject.ext.rulesVersion"

        // Dependencies for Android unit tests
        androidTestCompile "junit:junit:$rootProject.ext.junitVersion"
        androidTestCompile "org.mockito:mockito-core:$rootProject.ext.mockitoVersion"
        androidTestCompile "com.google.dexmaker:dexmaker:$rootProject.ext.dexmakerVersion"
        androidTestCompile "com.google.dexmaker:dexmaker-mockito:$rootProject.ext.dexmakerVersion"

        // Set this dependency to build and run UI Automator tests
        androidTestCompile 'com.android.support.test.uiautomator:uiautomator-v18:2.1.2'

        // Espresso UI Testing
        androidTestCompile "com.android.support.test.espresso:espresso-core:$rootProject.ext.espressoVersion"
        androidTestCompile "com.android.support.test.espresso:espresso-contrib:$rootProject.ext.espressoVersion"
        androidTestCompile "com.android.support.test.espresso:espresso-intents:$rootProject.ext.espressoVersion"
        androidTestCompile "com.android.support.test.espresso:espresso-idling-resource:$rootProject.ext.espressoVersion"
        /*androidTestCompile("com.android.support.test.espresso:espresso-core:$rootProject.ext.espressoVersion", {
            exclude group: "com.google.code.findbugs"
            exclude group: "com.android.support", module: "support-annotations"
        })*/

        // Resolve conflicts between main and test APK:
        androidTestCompile "com.android.support:support-annotations:$rootProject.ext.supportLibraryVersion"
        androidTestCompile "com.android.support:support-v4:$rootProject.ext.supportLibraryVersion"
        androidTestCompile "com.android.support:appcompat-v7:$rootProject.ext.supportLibraryVersion"
        androidTestCompile "com.android.support:design:$rootProject.ext.supportLibraryVersion"
        androidTestCompile "com.android.support:cardview-v7:$rootProject.ext.supportLibraryVersion"
        androidTestCompile "com.android.support:recyclerview-v7:$rootProject.ext.supportLibraryVersion"
        androidTestCompile "com.android.support:animated-vector-drawable:$rootProject.ext.supportLibraryVersion"
        //androidTestCompile "com.android.support:leanback-v17:$rootProject.ext.supportLibraryVersion"
    }
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
}
repositories {
    mavenCentral()
}